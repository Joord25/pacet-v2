# My PACET Roles: 문제 해결 원칙

이 문서는 PACET 프로젝트 진행 중 문제가 발생했을 때, 체계적이고 효율적인 해결을 위해 제가 준수해야 할 역할과 원칙을 정의합니다. 이 원칙들은 '빅뱅' 리팩토링으로 인한 혼란과 '흰 화면' 이슈 해결 과정에서 얻은 교훈을 바탕으로 수립되었습니다.

---

### 원칙 1: 점진적 개선 (Incremental Improvement)

> ⚠️ **지양:** 한 번에 많은 부분을 수정하는 "빅뱅" 방식의 리팩토링. (예: 프로젝트 전체의 데이터 구조 변경)

**핵심 전략:** 변경의 영향 범위를 최소화하고 안정성을 확보합니다.

1.  **데이터 변환 계층 (Data Transformation Layer) 도입:**
    *   백엔드(Supabase)로부터 `snake_case` 형식의 데이터를 수신하는 지점에서, 앱 내부에서 사용할 `camelCase` 형식으로 즉시 변환합니다.
    *   이를 통해 앱의 나머지 부분(컴포넌트, Context 등)은 일관된 `camelCase` 데이터 타입에만 의존하게 되어 코드의 복잡성이 감소합니다.

2.  **점진적 적용 (Incremental Adoption):**
    *   전체 시스템을 한 번에 수정하는 대신, 특정 기능 단위(예: 사용자 관리, 스케줄)부터 새로운 구조를 적용하고 테스트하며 점진적으로 확장합니다.

---

### 원칙 2: 계층적 디버깅 (Hierarchical Debugging)

> ⚠️ **지양:** 문제 발생 시, 곧바로 복잡한 애플리케이션 로직부터 분석하는 접근.

**핵심 전략:** 가장 기본적인 단계부터 순서대로 확인하여 문제의 원인을 체계적으로 좁혀나갑니다.

**[문제 발생 시 확인 순서]**

1.  **1단계: 환경 (Environment) 확인 - "실행 준비는 되었는가?"**
    *   **필수 설정 파일:** `babel.config.js`, `metro.config.js`, `.env` 등 프로젝트 구동에 필수적인 파일이 모두 존재하는지 확인합니다.
    *   **의존성:** `node_modules` 디렉토리가 존재하며, `npm install` 또는 `yarn`을 통해 모든 패키지가 정상적으로 설치되었는지 확인합니다.

2.  **2단계: 빌드 (Build) 확인 - "코드가 정상적으로 변환되는가?"**
    *   **Metro Bundler 로그:** 터미널에 출력되는 Metro Bundler의 로그를 확인하여 빌드 과정에서 발생하는 오류(Syntax Error 등)가 없는지 확인합니다. '흰 화면' 문제의 많은 부분이 여기서 발견됩니다.

3.  **3단계: 런타임 (Runtime) 확인 - "앱 실행 중 오류는 없는가?"**
    *   **개발자 콘솔:** 앱 또는 브라우저의 개발자 도구 콘솔에 출력되는 빨간색 오류 메시지를 확인합니다. (예: `undefined is not a function`)

4.  **4단계: 로직 (Logic) 확인 - "데이터 흐름과 상태는 정상적인가?"**
    *   위 1, 2, 3단계가 모두 정상일 때, 비로소 다음과 같은 애플리케이션 내부 로직을 디버깅합니다.
        *   데이터 흐름 (Props, Context)
        *   컴포넌트 상태 (State)
        *   비동기 로직 (API 호출, `useEffect`)
        *   Context 로딩 및 Provider 범위

---

### 원칙 3: 안전한 환경 관리 (Safe Environment Management)

> ⚠️ **지양:** `git clean -fd`와 같이 위험성이 높은 명령어의 무분별한 사용.

**핵심 전략:** 프로젝트의 무결성을 유지하고 실수를 방지합니다.

1.  **`.gitignore` 점검:**
    *   `babel.config.js`와 같이 프로젝트에 필수적인 파일은 `.gitignore`에서 제외하여 항상 Git으로 버전을 관리합니다.

2.  **신중한 Git 명령어 사용:**
    *   프로젝트를 초기화할 때는 `git clean -fd` 대신 `git restore .`를 우선적으로 사용합니다.
    *   추적되지 않는 파일을 삭제해야 할 경우, 전체 삭제 대신 특정 파일/디렉토리를 명시하여 신중하게 제거합니다.
description:
globs:
alwaysApply: false
---
